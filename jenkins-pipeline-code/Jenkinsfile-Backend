pipeline{
   agent any
   tools {
    jdk 'jdk'
    nodejs 'nodejs'
   }
   environment{
    SCANNER_HOME=tool 'sonar-scanner'
    AWS_ACCOUNT_ID = credentialsId('ACCOUNT_ID')
    AWS_ECR_REPO_NAME = credentialsId('ECR_REPO2')
    AWS_REGION = 'ap-south-1'
    REPOSITORY_URI = "${AWS_ACCOUNT_ID}.dkr.ecr.${AWS_REGION}.amazonaws.com/"
   }
   stages{
    stage('clean woprkspace'){
        steps{
            cleanWs()
        }
    }
    stage('checkout code from git repo'){
        steps{
            git credentialsId: 'GIT_HUB', url: 'https://github.com/silentknight2001/Devops-Three-tier-end-to-end.git' 
        }
    }
    stage('sonarqube Analysis'){
        steps{
            dir('application-code/backend'){
                withSonarQuebEnv('sonar-server'){
                    sh ''' $SCANNER_HOME/bin/sonar-scanner \
                    -Dsonar.projectName=three-tire-backend \
                    -Dsonar.projectKey=three-tier-backend '''
                }
            }
        }
    }
    stage('Qulity check'){
        steps{
            script{
                waitForQulityGate abortPipeline: false, credentialsId: 'sonar-token'
            }
        }
    }
    stage('OWASP dpendency-check scan'){
        steps{
            dir('application-code/backend'){
                dependencyCheck additionalArguments '--scan ./ --disableYarnAudit --disableNodeAudit', odcInstallation: 'DP-check'
                dependencyCheckPublisher pattern: '**/dependency-dependency-check-report.xml'
            }
        }
    }
    stage('trivy file scan'){
        steps{
            dir('application-code/backend'){
                sh 'trivy fs . > trivyfs.txt'
            }
        }
    }
    stage('build docker image'){
        steps{
            script{
                dir('application-code/backend'){
                    sh 'docker system prune -f'
                    sh 'docker system container prune -f'
                    sh 'docker build -t ${AWS_ECR_REPO_NAME} .'
                }
            }
        }
    }
    stage('image push to ECR'){
        steps{
            script{
                sh 'aws ecr get-login-password --region ${AWS_REGION} | docker login --username AWS --password-stdin ${REPOSITORY_URI}'
                sh 'docker tag ${AWS_ECR_REPO_NAME} ${REPOSITORY_URI}${AWS_ECR_REPO_NAME}:${BUILD_NUMBER}'
                sh 'docker push ${REPOSITORY_URI}${AWS_ECR_REPO_NAME}${BUILD_NUMBER}'

            }
            
        }
    }
    stage('trivy image scan'){
        steps{
            sh 'trivy image ${REPOSITORY_URI}${AWS_REPO_NAME}:${BUILD_NUMBER} > trivyimage.txt'
        }
    }
    stage('checkout code'){
        steps{
            git credentialsId: 'GITHUB', uri: 'https://github.com/silentknight2001/Devops-Three-tier-end-to-end.git'
        }
    }
    stage('Update deployment file'){
        environment{
            GIT_REPO_NAME = "Devops-Three-tier-end-to-end"
            GIT_USER_NAME = "silentknight2001"
        }
        steps{
            dir('k8s-menifast/backend'){
                withCredentials([string(credentialsId: 'github', variable: 'GITHUB_TOKEN')]){
                    sh '''
                    git config user.email "silentknight.www@gmail.com"
                    git config user.name "silentknight2001"
                    BUILD_NUMBER=${BUILD_NUMBER}
                    echo $BUILD_NUMBER
                    imageTag=$(grep -oP '(?<=backend:)[^ ]+' deployment.yaml)
                    echo $imageTag
                    sed -i "s/${AWS_ECR_REPO_NAME}:${imageTag}/${AWS_ECR_REPO_NAME}:${BUILD_NUMBER}/" deployment.yaml
                    git add deployment.yaml
                    git commit -m "Update deployment image to version ${BUILD_NUMBER}"
                    git push https://${GITHUB_TOKEN}@github.com/${GIT_REPO_NAME} HEAD:master
                  '''
                }
            }
        }
    }
   }
}